name: Node.js Build with docker to aci with OIDC

on:
  workflow_call:
    inputs:
      image-name:
        type: string
        description: the name of the image
        required: true
      resource-group:
        type: string
        description: the name of the resource group
        required: true
      acr-registry:
        type: string
        description: the name of the acr registry
        required: true
      oidc-login:
        type: boolean
        description: the name of the acr registry
        default: false
        required: false
      githubTokenAudience:
        type: string
        description: set a custom audience for your identity token
        required: false
        default: api://AzureADTokenExchange
      tag:
        type: string
        description: the tag of the image
        required: false
        default: latest
      artifact-name:
        type: string
        description: the name of the artifact
        required: false
        default: my-app
      dockerfile:
        type: string
        description: the name of the docker file
        required: false
        default: Dockerfile
    secrets:
      AZURE_CREDENTIALS:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false

run-name: Build and deploy to ACI by @${{ github.actor }} with OIDC

jobs:
  build:
    name: Build Node.js application
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - uses: ./.github/actions/build-node
      with:
        artifactName: ${{ inputs.artifact-name }}
        nodeVersion: 16.x

  build-docker:
    name: Build Docker Image with ACR
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image-name: ${{ steps.acr-build.outputs.image-ref }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name:  ${{ inputs.artifact-name }}
        path: dist
    - name: login with oidc
      uses: azure/login@v1
      if: ${{ inputs.oidc-login == true}}
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        audience: ${{ inputs.githubTokenAudience }}
    - name: login with credentials 
      uses: azure/login@v1
      if: ${{ inputs.oidc-login == false}}
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: ACR Build
      id: acr-build
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "image-tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          echo "Using tags ${{ inputs.tag }}"
          echo "image-ref=${{ inputs.acr-registry }}.azurecr.io/${{ inputs.image-name }}:${{ inputs.tag }}" >> $GITHUB_OUTPUT
          az acr build -r ${{ inputs.acr-registry }} -f ${{ inputs.dockerfile }} -t "${{ inputs.image-name }}:${{ inputs.tag }}" ./

  deploy-container-instance:
    name: Deploy to ACI
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
    - uses: actions/checkout@v3
    - name: login with oidc
      uses: azure/login@v1
      if: ${{ inputs.oidc-login == true}}
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        audience: ${{ inputs.githubTokenAudience }}
    - name: login with credentials 
      uses: azure/login@v1
      if: ${{ inputs.oidc-login == false}}
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: ACI Build and Push
      id: aci
      uses: azure/CLI@v1
      with:
        inlineScript: |
          cd infra
          guidLowerDashed=$(cat /proc/sys/kernel/random/uuid)
          guidLower=${guidLowerDashed//"-"/""}
          deploy_name="${GITHUB_REPOSITORY#*/}_$guidLower"
          deployment=$(az deployment group create --name $deploy_name --resource-group ${{ inputs.resource-group }} --template-file main.bicep --parameters image=${{ needs.build-docker.outputs.image-name }} acrName=${{ inputs.acr-registry }} --query properties.outputs)
          
          ipValue=$(echo "$deployment" | jq -r '.containerIp.value')
          echo "ip=$ipValue" >> $GITHUB_OUTPUT
    - name: Create a Rich Check
      uses: JediSchools/RichChecks@0.1
      with:
        name: "Deployed Artefact"
        status: "completed"
        title: "Deployment Result"
        summary: "Successful deployment"
        details: "You can access the container [here](http://${{ steps.aci.outputs.ip}}/)"
