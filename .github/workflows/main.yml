name: Python cicd

on:
  push:
    branches:
      - main
      - development
  pull_request:
    types : [opened,synchronize]
  workflow_dispatch: 

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-reusable
  cancel-in-progress: true


jobs: 
  compute-changes:
    name: Compute changed files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      config-hash: ${{ steps.config-hash.outputs.hash }}
      run-cifuzz: ${{ steps.check.outputs.run-cifuzz }}
      run-docs: ${{ steps.docs-changes.outputs.run-docs }}
      run-hypothesis: ${{ steps.check.outputs.run-hypothesis }}
      run-tests: ${{ steps.check.outputs.run-tests }}
      run-win-msi: ${{ steps.win-msi-changes.outputs.run-win-msi }}
    steps:
    - run: >-
        echo '${{ github.event_name }}'
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Check for source changes
      id: check
      run: |
        if [ -z "$GITHUB_BASE_REF" ]; then
          echo "run-tests=true" >> "$GITHUB_OUTPUT"
        else
          echo "::debug::GITHUB_BASE_REF has value: $GITHUB_BASE_REF"
          git fetch origin "$GITHUB_BASE_REF" --depth=1
          git diff --name-only "origin/$GITHUB_BASE_REF.." | grep -qvE '(\.rst$|^Doc|^Misc|^\.pre-commit-config\.yaml$|\.ruff\.toml$|\.md$|mypy\.ini$)' && echo "run-tests=true" >> "$GITHUB_OUTPUT" || true
        fi
  check_autoconf_regen:
      name: 'Check if Autoconf files are up to date'
      # Don't use ubuntu-latest but a specific version to make the job
      # reproducible: to get the same tools versions (autoconf, aclocal, ...)
      runs-on: ubuntu-24.04
      container:
        image: ghcr.io/python/autoconf:2024.11.11.11786316759
      timeout-minutes: 60
      needs: compute-changes
      if: needs.check_source.outputs.run_tests == 'true'
      steps:
        - name: Install Git
          run: |
            apt update && apt install git -yq
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
        - uses: actions/checkout@v4
          with:
            fetch-depth: 1
            persist-credentials: false
        - name: Runner image version
          run: echo "IMAGE_VERSION=${ImageVersion}" >> "$GITHUB_ENV"
        - name: Check Autoconf and aclocal versions
          run: |
            grep "Generated by GNU Autoconf 2.71" configure
            grep "aclocal 1.16.5" aclocal.m4
            grep -q "runstatedir" configure
            grep -q "PKG_PROG_PKG_CONFIG" aclocal.m4
        - name: Regenerate autoconf files
          # Same command used by Tools/build/regen-configure.sh ($AUTORECONF)
          run: autoreconf -ivf -Werror
        - name: Check for changes
          run: |
            git add -u
            changes=$(git status --porcelain)
            # Check for changes in regenerated files
            if test -n "$changes"; then
              echo "Generated files not up to date."
              echo "Perhaps you forgot to run make regen-configure ;)"
              echo "configure files must be regenerated with a specific version of autoconf."
              echo "$changes"
              echo ""
              git diff --staged || true
              exit 1
            fi

  gitleaks: 
    name: Gitleaks(Secrets)
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2.3.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config: .gitleaks.toml
  snyk:
    name: Snyk (Security & Dependencies)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-in-project: true
      - name: Check Poetry Version
        run: poetry --version
      - run: poetry install
      - name: Check Poetry Version
        run: poetry --version
      - name: Run Snyk to Check for Vulnerabilities
        uses: snyk/actions/python-3.10@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
      - name: Run Snyk to Check for Vulnerabilities
        uses: snyk/actions/python-3.10@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
  black:
    name: Black (Python Formatting)
    runs-on: ubuntu-latest
    steps:
      - name: Install Black and isort
        run: pip install black isort
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-in-project: true
          options: "--check --verbose"
      - name: Black
        uses: jpetrucciani/black-check@24.3.0
      - name: Run isort
        run: isort --profile black .
      - name: Check Formatting
        run: black --check --diff --verbose .
